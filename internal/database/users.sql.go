// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const changeUserLoginInfo = `-- name: ChangeUserLoginInfo :one
UPDATE users
SET email = $3, 
    hashed_password = $2,
    updated_at = now()
WHERE id = $1
RETURNING id, email, is_chirpy_red, created_at, updated_at
`

type ChangeUserLoginInfoParams struct {
	ID             uuid.UUID
	HashedPassword string
	Email          string
}

type ChangeUserLoginInfoRow struct {
	ID          uuid.UUID
	Email       string
	IsChirpyRed bool
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) ChangeUserLoginInfo(ctx context.Context, arg ChangeUserLoginInfoParams) (ChangeUserLoginInfoRow, error) {
	row := q.db.QueryRowContext(ctx, changeUserLoginInfo, arg.ID, arg.HashedPassword, arg.Email)
	var i ChangeUserLoginInfoRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.IsChirpyRed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, hashed_password)
VALUES (
    $1,
    $2
)
RETURNING id, email, is_chirpy_red, created_at, updated_at
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

type CreateUserRow struct {
	ID          uuid.UUID
	Email       string
	IsChirpyRed bool
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.IsChirpyRed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUsers)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const upgradeUser = `-- name: UpgradeUser :one
UPDATE users
SET is_chirpy_red = true,
    updated_at = now()
WHERE id = $1
RETURNING id, email, is_chirpy_red, created_at, updated_at
`

type UpgradeUserRow struct {
	ID          uuid.UUID
	Email       string
	IsChirpyRed bool
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) UpgradeUser(ctx context.Context, id uuid.UUID) (UpgradeUserRow, error) {
	row := q.db.QueryRowContext(ctx, upgradeUser, id)
	var i UpgradeUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.IsChirpyRed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
